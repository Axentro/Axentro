## Group Transaction

# /transaction/{id}

## GET

This retrieves the transaction specified by the transaction id as Json

+ Parameters

    + id (number) - The transaction id
    
+ Response 200 (application/json)

    + Body

            {
              "status": "success",
              "result": 
                {
                  "status": "accepted",
                  "transaction": 
                    {
                      "id": "f3aa3b5e04a4890e873e56d7ac35b3b90fe549afd783f7b5826055e0872bde6f",
                      "action": "head",
                      "senders": [],
                      "recipients": 
                        [
                          {
                            "address": "VDBjMTlkMWM0NTZhYmE3ZjdmYmVkMDgwMWFhZTMyMDRhMTUzNjFhYWUwYzk3ODQ5",
                            "amount": 12615663
                          },
                          {
                            "address": "VDBkYWQxZjZlZjllOTAzYzNiODQ0NmZkZTI4NDBhYmMzYjUxYThjM2E1ZjNkODlj",
                            "amount": 37846987
                          }
                        ],
                      "message": "0",
                      "token": "SUSHI",
                      "prev_hash": "0",
                      "timestamp": 1527522043,
                      "scaled": 1
                    }
                }
            }

        
## transaction/block [GET /transaction/{id}/block]

This retrieves the block containing the specified transaction id as Json

+ Parameters

    + id (number) - The transaction id
    
+ Response 200 (application/json)

    + Body

            {
              "status": "success",
              "result": 
                {
                  "index": 156,
                  "transactions": 
                    [
                      {
                        "id": "f3aa3b5e04a4890e873e56d7ac35b3b90fe549afd783f7b5826055e0872bde6f",
                        "action": "head",
                        "senders": [],
                        "recipients": 
                          [
                            {
                              "address": "VDBjMTlkMWM0NTZhYmE3ZjdmYmVkMDgwMWFhZTMyMDRhMTUzNjFhYWUwYzk3ODQ5",
                              "amount": 12615663
                            },
                            {
                              "address": "VDBkYWQxZjZlZjllOTAzYzNiODQ0NmZkZTI4NDBhYmMzYjUxYThjM2E1ZjNkODlj",
                              "amount": 37846987
                            }
                          ],
                        "message": "0",
                        "token": "SUSHI",
                        "prev_hash": "0",
                        "timestamp": 1527522043,
                        "scaled": 1
                      }
                    ],
                  "nonce": 6558232399239314000,
                  "prev_hash": "9c6845c1e03bf3eb132b25835f8c4f2f90c09dd5221325134c50434fbe947346",
                  "merkle_tree_root": "0531d7957b9863ab1597e787b446e633fe1df1eb",
                  "timestamp": 1527522043,
                  "difficulty": 4
                }
            }


## transaction/block/header [GET /transaction/{id}/block/header]

This retrieves the block header containing the specified transaction id as Json

+ Parameters

    + id (number) - The transaction id
    
+ Response 200 (application/json)

    + Body

            {
              "status": "success",
              "result": 
                {
                  "index": 156,
                  "nonce": 6558232399239314000,
                  "prev_hash": "9c6845c1e03bf3eb132b25835f8c4f2f90c09dd5221325134c50434fbe947346",
                  "merkle_tree_root": "0531d7957b9863ab1597e787b446e633fe1df1eb",
                  "timestamp": 1527522043,
                  "difficulty": 4
                }
            }


## transaction/fees [GET /transaction/fees]

This gets the current transaction fees as json

+ Response 200 (application/json)

    + Body

            {
              "status": "success",
              "result": 
                {
                  "send": "0.0001",
                  "scars_buy": "0.001",
                  "scars_sell": "0.0001",
                  "scars_cancel": "0.0001",
                  "create_token": "0.1"
                }
            }


## transaction/unsigned [POST /transaction/unsigned]

Creates an unsigned transaction with the supplied data (which can be used to make a signed transaction) - The transaction is returned in the response with a generated Id which can then be signed and used with the create (signed) transaction API call.

### Post Body

The post body is made up of the following mandatory fields:

* action
* senders
* recipients
* message
* token
* kind

#### Action

action is the type of action to perform - e.g send - is when you want to send some tokens to an address. Send is the most common but there are others like create_token etc as well as those used in scars. Also users can create their own actions as part of building dApps.

```json
{"action":"send" ...}
```

#### Senders

This is information about where a payment or action originates - e.g. the address from which to send tokens from. It's made up of an address, amount, fee and public key. It's a list of senders but generally there is only one

```json
{
  "senders": 
  [  
    {
      "address": "the-address", 
      "amount": "1000", 
      "fee":"1",
      "public_key":"the-public-key",
      "sign_r":"0",
      "sign_s":"0"
    }
  ] 
  ...
}
```

#### Recipients

This is information about when a payment of action is going - e.g. the destination address when sending tokens. It's made up of an address and amount. It's a list of recipients but generally there is only one

```json
{
  "recipients": 
    [
      {
        "address": "the-address",
        "amount":"1000"
      }
    ] 
    ...
}
```

#### Message

This is a place to but arbitrary data related to the transaction - for sending tokens it's generally empty - but it's useful when building dapps.

```json
{"message": "some message" ...}
```

#### Token

This is the token to use - generally it's SUSHI but it can be any other user created token

```json
{"token": "SUSHI" ...}
```

#### Kind

This is the transaction speed either FAST or SLOW 

```json
{"kind": "FAST" ...}
```

#### A complete request body

```json
{
  "action": "send",
  "senders": 
    [
      {
        "address": "VDBkYWQxZjZlZjllOTAzYzNiODQ0NmZkZTI4NDBhYmMzYjUxYThjM2E1ZjNkODlj",
        "public_key": "48c45b7e45cd415187216452fa22523e002ca042c2bd7205484f29201c3d5806f90e7aeebad37e3fbe01286c25d4027d3f3fec7b5647eff33c07ebd287b57242",
        "amount": "5000",
        "fee": "1",
        "sign_r":"0",
        "sign_s":"0"
      }
    ],
  "recipients": 
    [
      {
        "address":"VDBlY2I4ZjA5MTUxOWE0MTIwNTRmZjlhYTM1YjYxMjcwNjM1YzcxYjlkMDZhZDUx",
        "amount": "5000"
      }
    ],
  "message": "",
  "token": "SUPERCOOL",
  "kind": "FAST"
}
```

+ Request - Create an unsigned transaction (text/plain)

        {"action": "send","senders": [{"address": "VDBkYWQxZjZlZjllOTAzYzNiODQ0NmZkZTI4NDBhYmMzYjUxYThjM2E1ZjNkODlj","public_key": "48c45b7e45cd415187216452fa22523e002ca042c2bd7205484f29201c3d5806f90e7aeebad37e3fbe01286c25d4027d3f3fec7b5647eff33c07ebd287b57242","amount": "5000","fee": "1","sign_r":"0","sign_s":"0"}],"recipients": [{"address":"VDBlY2I4ZjA5MTUxOWE0MTIwNTRmZjlhYTM1YjYxMjcwNjM1YzcxYjlkMDZhZDUx","amount": "5000"}],"message": "","token": "SUPERCOOL", "kind": "FAST"}

+ Response 200 (application/json)

    + Body

            {
              "status": "success",
              "result": 
                {
                  "id": "8069e6049f7175229f8e05e5cf4cd5dacbc82cad08bfbd251408b6e980d90b04",
                  "action": "send",
                  "senders": 
                    [
                      {
                        "address": "VDBkYWQxZjZlZjllOTAzYzNiODQ0NmZkZTI4NDBhYmMzYjUxYThjM2E1ZjNkODlj",
                        "public_key": "48c45b7e45cd415187216452fa22523e002ca042c2bd7205484f29201c3d5806f90e7aeebad37e3fbe01286c25d4027d3f3fec7b5647eff33c07ebd287b57242",
                        "amount": 500000000000,
                        "fee": 100000000,
                        "sign_r": "0",
                        "sign_s": "0"
                      }
                    ],
                  "recipients": 
                    [
                      {
                        "address": "VDBlY2I4ZjA5MTUxOWE0MTIwNTRmZjlhYTM1YjYxMjcwNjM1YzcxYjlkMDZhZDUx",
                        "amount": 500000000000
                      }
                    ],
                  "message": "",
                  "token": "SUPERCOOL",
                  "prev_hash": "0",
                  "timestamp": 1529781499,
                  "scaled": 1,
                  "kind": "FAST"
                }
            }

## transaction/signed [POST /transaction]

Creates a signed transaction with the supplied data (use after creating an unsigned transaction). The first step is to create an unsigned transaction using the 
unsigned transaction API. The response from the unsigned call is then used as the payload for this signed API call to send a transaction. The response from the unsigned call
will return a transactionId as well as the timestamp and the scaled value.

### Post Body

The post body is made up of the following mandatory fields:

* action
* senders
* recipients
* message
* token
* kind
* prev_hash (populated by the unsigned call)
* timestamp (populated by the unsigned call)
* scaled    (populated by the unsigned call)


#### Action

action is the type of action to perform - e.g send - is when you want to send some tokens to an address. Send is the most common but there are others like create_token etc as well as those used in scars. Also users can create their own actions as part of building dApps.

```json
{"action":"send" ...}
```

#### Senders

This is information about where a payment or action originates - e.g. the address from which to send tokens from. It's made up of an address, amount, fee and public key. It's a list of senders but generally there is only one

```json
{
  "senders": 
  [  
    {
      "address": "the-address", 
      "amount": "1000", 
      "fee":"1",
      "public_key":"the-public-key",
      "sign_r":"0",
      "sign_s":"0"
    }
  ] 
  ...
}
```

#### Recipients

This is information about when a payment of action is going - e.g. the destination address when sending tokens. It's made up of an address and amount. It's a list of recipients but generally there is only one

```json
{
  "recipients": 
    [
      {
        "address": "the-address",
        "amount":"1000"
      }
    ] 
    ...
}
```

#### Message

This is a place to but arbitrary data related to the transaction - for sending tokens it's generally empty - but it's useful when building dapps.

```json
{"message": "some message" ...}
```

#### Token

This is the token to use - generally it's SUSHI but it can be any other user created token

```json
{"token": "SUSHI" ...}
```

#### Kind

This is the transaction speed either FAST or SLOW 

```json
{"kind": "FAST" ...}
```
#### Prev Hash

The response from the unsigned call will contain the prev hash field which is the hash of the previous transaction. It is required to prove the authenticity of the transaction. 
When the transaction is successful then the prev_hash value will be populated while adding it to the block.

```json
{"prev_hash": "0" ...}
```

#### Timestamp

The timestamp of the transaction (should be returned by the create unsigned transaction api call)

```json
{"timestamp":1529781499 ...}
```

#### Scaled

The amount field is either an Int or a Decimal - this flag sets the type of value to expect (0 = Decimal, 1 = Int) - This is because amounts are stored in the blockchain as Int but used as a decimal with 8 places e.g. 0.00000001 (should be returned by the create unsigned transaction api call)

```json
{"scaled":1 ...}
```

### Signing a Sender

To create a transaction that will be accepted by the node you have to sign it with your private key (signing happens inside Senders). A typical usage pattern is to first create an unsigned transaction using the API which will return the original transaction but with an Id and prev hash and then use this to create a signed transaction and send it via this API call. See the help with signing page on the wiki.

```json
{"sign_r": "some-signing-r", "sign_s":"some-signing-s" ...}
```

#### A complete request body

```json
{
  "transaction": 
    {
      "id": "8069e6049f7175229f8e05e5cf4cd5dacbc82cad08bfbd251408b6e980d90b04",
      "action": "send",
      "senders": 
        [
          {
            "address": "VDBkYWQxZjZlZjllOTAzYzNiODQ0NmZkZTI4NDBhYmMzYjUxYThjM2E1ZjNkODlj",
            "public_key": "48c45b7e45cd415187216452fa22523e002ca042c2bd7205484f29201c3d5806f90e7aeebad37e3fbe01286c25d4027d3f3fec7b5647eff33c07ebd287b57242",
            "amount": 500000000000,
            "fee": 100000000,
            "sign_r": "0",
            "sign_s": "0"
          }
        ],
      "recipients": 
        [
          {
            "address": "VDBlY2I4ZjA5MTUxOWE0MTIwNTRmZjlhYTM1YjYxMjcwNjM1YzcxYjlkMDZhZDUx",
             "amount": 500000000000
          }
        ],
      "message": "",
      "token": "SUPERCOOL",
      "prev_hash": "0",
      "timestamp": 1529781499,
      "scaled": 1,
      "kind": "FAST"
    }
}
```

+ Request - Create an signed transaction (text/plain)

        {"transaction": {"id":"9581ab8ae3c121cdec9d57613006bae9014a28fb87de2c8c6348adac485d2d4e","action":"send","senders":[{"address":"VDBkYWQxZjZlZjllOTAzYzNiODQ0NmZkZTI4NDBhYmMzYjUxYThjM2E1ZjNkODlj","public_key":"48c45b7e45cd415187216452fa22523e002ca042c2bd7205484f29201c3d5806f90e7aeebad37e3fbe01286c25d4027d3f3fec7b5647eff33c07ebd287b57242","amount":5000,"fee":1,"sign_r":"0","sign_s":"0"}],"recipients":[{"address":"VDBlY2I4ZjA5MTUxOWE0MTIwNTRmZjlhYTM1YjYxMjcwNjM1YzcxYjlkMDZhZDUx","amount":5000}],"message":"","token":"WOOP","prev_hash":"0","timestamp":1529781499,"scaled":1, "kind":"FAST"}}

+ Response 200 (application/json)

    + Body

            {
              "status": "success",
              "result": 
                {
                  "id": "8069e6049f7175229f8e05e5cf4cd5dacbc82cad08bfbd251408b6e980d90b04",
                  "action": "send",
                  "senders": 
                    [
                      {
                        "address": "VDBkYWQxZjZlZjllOTAzYzNiODQ0NmZkZTI4NDBhYmMzYjUxYThjM2E1ZjNkODlj",
                        "public_key": "48c45b7e45cd415187216452fa22523e002ca042c2bd7205484f29201c3d5806f90e7aeebad37e3fbe01286c25d4027d3f3fec7b5647eff33c07ebd287b57242",
                        "amount": 500000000000,
                        "fee": 100000000,
                        "sign_r": "0",
                        "sign_s": "0"
                      }
                    ],
                  "recipients": 
                    [
                      {
                        "address": "VDBlY2I4ZjA5MTUxOWE0MTIwNTRmZjlhYTM1YjYxMjcwNjM1YzcxYjlkMDZhZDUx",
                        "amount": 500000000000
                      }
                    ],
                  "message": "",
                  "token": "SUPERCOOL",
                  "prev_hash": "0",
                  "timestamp": 1529781499,
                  "scaled": 1,
                  "kind": "FAST"
                }
            }
            